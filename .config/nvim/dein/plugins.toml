[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'sjl/badwolf'
hook_add = '''
    let g:badwolf_darkgutter = 1
'''

[[plugins]]
repo = 'morhetz/gruvbox'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'challenger-deep-theme/vim'
name = 'challenger-deep'

[[plugins]]
repo = 'wadackel/vim-dogrun'

[[plugins]]
repo = 'fxn/vim-monochrome'

[[plugins]]
repo = 'cespare/vim-toml'

#[[plugins]]
#repo = 'neovim/nvim-lsp'
#hook_add = '''
#lua << EOF
#local util = require'nvim_lsp/util'
#local lsp = vim.lsp
#require'nvim_lsp'.pyls.setup{
#    name = "gopls",
#    cmd = {"gopls", "-mode", "stdio"},
#    filetypes = {"go"},
#    root_dir = util.root_pattern("go.mod", ".git"),
#    log_level = lsp.protocol.MessageType.Warning,
#    settings = {
#        staticcheck = false,
#        completeUnimported = false,
#        deepCompletion = true,
#        caseSensitiveCompletion = true,
#        usePlaceholders = true,
#        completionDocumentation = false,
#        watchFileChanges = true,
#        hoverKind = "SynopsisDocumentation",
#    },
#}
#require'nvim_lsp'.gopls.setup{}
#require'nvim_lsp'.rls.setup{}
#EOF
#
#autocmd Filetype go setlocal omnifunc=v:lua.vim.lsp.omnifunc
#nnoremap <leader>jc <cmd>lua vim.lsp.buf.declaration()<CR>
#nnoremap <leader>jd <cmd>lua vim.lsp.buf.definition()<CR>
#nnoremap <leader>jv :vsp<cr><cmd>lua vim.lsp.buf.definition()<CR>
#nnoremap <leader>sd <cmd>lua vim.lsp.buf.hover()<CR>
#nnoremap <leader>ji <cmd>lua vim.lsp.buf.implementation()<CR>
#nnoremap <leader>jh <cmd>lua vim.lsp.buf.signature_help()<CR>
#nnoremap <leader>jy :vsp<cr><cmd>lua vim.lsp.buf.type_definition()<CR>
#
#'''

[[plugins]]
repo = 'mattn/vim-goimports'

#[[plugins]]
#repo = 'fatih/vim-go'
#hook_add = '''
#  let g:go_snippet_engine = ""
#  let g:go_fmt_command = "goimports"
#  let g:go_def_mapping_enabled = 0
#  let g:go_doc_keywordprg_enabled = 0
#  let g:go_code_completion_enabled = 0
#'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

#[[plugins]]
#repo = 'prabirshrestha/asyncomplete.vim'
#hook_add = '''
#    inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
#    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
#    inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
#    imap <c-space> <Plug>(asyncomplete_force_refresh)
#'''

#[[plugins]]
#repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
    let g:lsp_insert_text_enabled = 0
    let g:lsp_text_edit_enabled = 0
    ""let g:lsp_log_verbose = 1
    ""let g:lsp_log_file = expand('~/vim-lsp.log')
    ""let g:asyncomplete_log_file = expand('~/asyncomplete.log')

    augroup MyLsp
        autocmd!

        if executable('gopls')
          augroup LspGo
            au!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'gopls',
                \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
                \ 'whitelist': ['go'],
                \ 'workspace_config': {'gopls': {
                \   'staticcheck': v:false,
                \   'completeUnimported': v:false,
                \   'deepCompletion': v:true,
                \   'caseSensitiveCompletion': v:true,
                \   'usePlaceholders': v:true,
                \   'completionDocumentation': v:false,
                \   'watchFileChanges': v:true,
                \   'hoverKind': 'SynopsisDocumentation',
                \   }},
                \ })
            autocmd bufWritePost *.go :LspDocumentFormat
          augroup END
        endif

        let s:pyls_path = fnamemodify(g:python_host_prog, ':h') . '/'. 'pyls'
        if executable('pyls')
          augroup LspPython
            au!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'pyls',
                \ 'cmd': { server_info -> [expand(s:pyls_path)] },
                \ 'whitelist': ['python'],
                \ 'workspace_config': {'pyls': {
                \   'plugins': {
                \     'pycodestyle': {'enabled': v:true},
                \     'jedi_definition': {'follow_imports': v:true, 'follow_builtin_imports': v:true},
                \    }}},
                \})
            autocmd bufWritePost *.py :LspDocumentFormat
          augroup END
        endif

        if executable('analysis-server-dart-snapshot')
          augroup LspDart
            au!
            autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'analysis-server-dart-snapshot',
                \ 'cmd': { server_info -> ['analysis-server-dart-snapshot'] },
                \ 'whitelist': ['dart'],
                \ 'workspace_config': {'analysis-server-dart-snapshot': {}},
                \})
            autocmd bufWritePost *.dart :LspDocumentFormat
          augroup END
        endif


        ""setlocal omnifunc=lsp#complete
        nmap <leader>sd :LspHover<cr>
        nmap <leader>jd :LspDefinition<cr>
        nmap <leader>jv :vsp<cr>:LspDefinition<cr>
        nmap <leader>jy :vsp<cr>:LspTypeDefinition<cr>
        nmap <leader>ji :LspImplementation<cr>
        nmap <leader>rn :LspRename<cr>
        nmap <buffer> ,n :LspNextError<cr>
        nmap <buffer> ,p :LspPreviousError<cr>

    augroup END
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_completion_start_length = 1
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#enable_auto_close_preview = 1
    call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })
    imap <expr><TAB>
     \ pumvisible() ? "\<C-n>" : "\<TAB>"
'''

[[plugins]]
repo = 'ncm2/float-preview.nvim.git'
hook_add = '''
    set completeopt-=preview
    let g:float_preview#docked = 0
'''

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'

[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-snippets'

[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-ultisnips'

[[plugins]]
repo = 'SirVer/ultisnips'
depends = ['vim-snippets']
hook_add = '''
    let g:UltiSnipsSnippetDirectories=["~/.config/nvim/snippets/UltiSnips"]
    let g:UltiSnipsExpandTrigger="<c-x>"
    let g:UltiSnipsJumpForwardTrigger="<c-x>"
    let g:UltiSnipsJumpBackwardTrigger="<c-x>"
    imap <C-k> <C-R>=UltiSnips#ExpandSnippetOrJump()<cr>
    smap <C-k> <Esc>:call UltiSnips#ExpandSnippetOrJump()<cr>
    xmap <C-k> :call UltiSnips#SaveLastVisualSelection()<cr>gvs
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    nnoremap [denite] <Nop>
    nmap <C-c> [denite]

    " Show files under current dir
    nnoremap <silent> [denite]f :<C-u>DeniteBufferDir
          \ -direction=topleft -cursor-wrap=true file file:new<CR>
    " List buffers
    nnoremap <silent> [denite]b :<C-u>Denite -direction=topleft -cursor-wrap=true buffer<CR>
    " List register
    nnoremap <silent> [denite]r :<C-u>Denite -direction=topleft -cursor-wrap=true -buffer-name=register register<CR>
    " List recent open files
    nnoremap <silent> [denite]m :<C-u>Denite -direction=topleft -cursor-wrap=true file_mru<CR>
    " List bookmark
    nnoremap <silent> [denite]c :<C-u>Denite -direction=topleft -cursor-wrap=true bookmark<CR>
    " Add bookmark
    nnoremap <silent> [denite]a :<C-u>DeniteBookmarkAdd<CR>

    " .git
    "nnoremap <silent> [denite]k :<C-u>Denite -direction=topleft -cursor-wrap=true
    "      \ -path=`substitute(finddir('.git', './;'), '.git', '', 'g')`
    "      \ file_rec/git<CR>

    call denite#custom#source('file'    , 'matchers', ['matcher_cpsm', 'matcher_fuzzy'])

    call denite#custom#source('buffer'  , 'matchers', ['matcher_regexp'])
    call denite#custom#source('file_mru', 'matchers', ['matcher_regexp'])

    call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])

    call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>', 'noremap')
    call denite#custom#map('insert', '<C-W>', '<denite:move_up_path>', 'noremap')
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
    function! NearestMethodOrFunction() abort
      return get(b:, 'vista_nearest_method_or_function', '')
    endfunction

    autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
    nmap <leader>ms :Vista vim_lsp<cr>
    nmap <leader>mf :Vista finder vim_lsp<cr>
    nmap <leader>mc :Vista!<cr>
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive', 'vista.vim']
hook_add = '''
    let g:lightline = {
        \'colorscheme': 'onedark',
        \'active': {
        \  'left': [
        \    ['mode', 'paste'],
        \    ['fugitive', 'readonly', 'filename', 'modified', 'method'],
        \    ['pyenv'],
        \  ]
        \},
        \'component': {
        \   'readonly': '%{&filetype=="help"?"":&readonly?"ro":""}',
        \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
        \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
        \},
        \'component_visible_condition': {
        \   'readonly': '(&filetype!="help"&& &readonly)',
        \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
        \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
        \},
        \'component_function': {
        \   'filename': 'MyFilename',
        \   'method': 'NearestMethodOrFunction',
        \   'pyenv': 'virtualenv#statusline',
        \}
    \}
    set laststatus=2
    function! MyFilename()
        let p = substitute(expand('%:p'), $HOME, '~', '')
        let name = ""
	    let subs = split(p, "/")
	    let i = 1
	    for s in subs
	    	let parent = name
	    	if  i == len(subs)
	    		let name = parent . '/' . s
	    	elseif i == 1
	    		let name = s
	    	else
	    		let name = parent . '/' . s
	    	endif
	    	let i += 1
	    endfor
        return name
    endfunction
'''

[[plugins]]
repo = 'kien/ctrlp.vim'
hook_add = '''
    let g:ctrlp_use_caching=0
    let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap [fugitive]  <Nop>
    nmap <space>g [fugitive]
    nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
    nnoremap <silent> [fugitive]a :Gwrite<CR>
    nnoremap <silent> [fugitive]c :Gcommit-v<CR>
    nnoremap <silent> [fugitive]b :Gblame<CR>
    nnoremap <silent> [fugitive]d :Gdiff<CR>
    nnoremap <silent> [fugitive]m :Gmerge<CR>
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
set rtp+=/usr/local/opt/fzf
let g:fzf_buffers_jump = 1
nnoremap <silent> <Leader>ff :<C-u>Ag<CR>
nnoremap <silent> <Leader>fh :<C-u>History<CR>
nnoremap <silent> <Leader>ft :<C-u>call fzf#vim#tags(expand('<cword>'))<CR>
nnoremap <silent> <Leader>fb :<C-u>Buffers<CR>
nnoremap <silent> <Leader>fs :<C-u>GFiles?<CR>
nnoremap <silent> <Leader>fgf :<C-u>GFiles<CR>
nnoremap <silent> <Leader>fm :<C-u>Marks<CR>
let g:fzf_layout = { 'down': '30%' }
let g:fzf_action = {
  \ 'ctrl-b': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

augroup vimrc_fzf
    autocmd!
    autocmd FileType fzf tnoremap <buffer> <leader>z <Esc>
augroup END
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
    vmap <Leader>l <Plug>(expand_region_expand)
    vmap <Leader>h <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
    map  <Leader>ej <Plug>(easymotion-bd-w)
    nmap <Leader>ej <Plug>(easymotion-overwin-w)
    map <Leader>el <Plug>(easymotion-bd-jk)
    nmap <Leader>el <Plug>(easymotion-overwin-line)
    map <Leader>ek <Plug>(easymotion-bd-f)
    nmap <Leader>ek <Plug>(easymotion-overwin-f)
    nmap <Leader>ekk <Plug>(easymotion-overwin-f2)
'''

#[[plugins]]
#repo = 'yuttie/comfortable-motion.vim'
#hook_add = '''
#    let g:comfortable_motion_interval = 2400.0 / 60
#    let g:comfortable_motion_friction = 100.0
#    let g:comfortable_motion_air_drag = 3.0
#'''

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nmap <silent> <C-q>      :NERDTreeToggle<CR>
    vmap <silent> <C-q> <Esc>:NERDTreeToggle<CR>
    omap <silent> <C-q>      :NERDTreeToggle<CR>
    imap <silent> <C-q> <Esc>:NERDTreeToggle<CR>
    cmap <silent> <C-q> <C-u>:NERDTreeToggle<CR>

    let NERDTreeShowHidden=1
'''
[[plugins]]
repo = 'hashivim/vim-terraform'
hook_add = '''
    let g:terraform_align = 1
'''
#
[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'cd app & yarn install'

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
    let g:openbrowser_browser_commands = [ {'name': 'google-chrome-stable',  'args': ['{browser}', '{uri}']} ]
'''

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

[[plugins]]
repo = 'uarun/vim-protobuf'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
    vnoremap <silent> <Enter> :EasyAlign<cr>
'''
#
#[[plugins]]
#repo = 'kylef/apiblueprint.vim'
#hook_add = '''
#    autocmd FileType apiblueprint nnoremap <C-b> :call GenerateRefract()<cr>
#'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'bazelbuild/vim-ft-bzl'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'buoto/gotests-vim'

[[plugins]]
repo = 'rhysd/vim-clang-format'
hook_add = '''
    let g:clang_format#filetype_style_options = {
        \"proto": {
        \    "BasedOnStyle" : "Google",
        \    "AlignConsecutiveAssignments": "true",
        \    "AlignConsecutiveDeclarations": "true",
        \    }
        \}
    autocmd FileType c,cpp,proto,javascript ClangFormatAutoEnable
'''

[[plugins]]
repo = 'andymass/vim-matchup'

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'
