[[plugins]]
repo = 'Shougo/dein.vim'
 
[[plugins]]
repo = 'sjl/badwolf'
 
#[[plugins]]
#repo = 'neomake/neomake'
#hook_add = '''
#    autocmd! BufWritePost * Neomake
#    let g:neomake_verbose = 2
#    let g:neomake_open_list = 2
#    let g:neomake_place_signs = 0
#    let g:neomake_go_enabled_makers = ['goimports', 'gometalinter']
#    let g:neomake_go_gometalinter_args = ['--disable-all', '--enable=goimports', '--enable=misspell', '--enable=staticcheck', '--enable=unused']
#'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_enter = 0
    let g:ale_lint_on_text_changed = 0
    let g:ale_fix_on_save = 1
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
    let g:ale_sign_column_always = 1
    let g:ale_open_list = 1
    let g:ale_keep_list_window_open = 0
    let g:ale_linters = {}
    let g:ale_fixers = {}

    let g:ale_linters.go = ['gometalinter']
    let g:ale_go_gometalinter_options = '--fast --enable=goimports --enable=gofmt --enable=misspell --enable=staticcheck --enable=unused --enable=goconst'               

    let g:ale_linters.python = ['flake8']
    let g:ale_fixers.python = ['isort', "autopep8", 'yapf']
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("python3")'
depends = 'context_filetype.vim'
on_event = 'InsertCharPre'
hook_add = '''
    set runtimepath+=~/.config/nvim/plugged/deoplete.nvim/
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_delay = 0
    let g:deoplete#auto_complete_start_length = 1
    let g:deoplete#enable_camel_case = 0
    let g:deoplete#enable_ignore_case = 0
    let g:deoplete#enable_refresh_always = 0
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#file#enable_buffer_path = 1
    let g:deoplete#max_list = 10000
    let deoplete#tag#cache_limit_size = 5000000
    let g:deoplete#sources = {}
    let g:deoplete#sources._ = []
    let g:deoplete#omni#input_patterns = {}
    let g:deoplete#sources#dictionary#dictionaries = {}

    let g:deoplete#omni#input_patterns.scala = [
        \ '[^. *\t]\.\w*',
        \ '[:\[,] ?\w*',
        \ '^import .*'
        \] 
    let g:deoplete#sources#dictionary#dictionaries = {
        \ 'scala' : $HOME . '/.config/nvim/dict/scala.dict',
        \ }


    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
        return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    endfunction
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    nnoremap <silent> ,g  :<C-u>Denite -auto_preview grep -buffer-name=search-buffer-denite<CR>
    nnoremap <silent> ,un :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=+1 -immediately<CR>
    nnoremap <silent> ,up :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=-1 -immediately<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    let g:neosnippet#snippets_directory = '~/.cache/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets'
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    set laststatus=2
    let g:lightline = { 
        \'colorscheme': 'wombat',
        \'active': {
        \  'left': [
        \    ['mode', 'paste'],
        \    ['readonly', 'filename', 'modified', 'ale'],
        \  ]
        \},
        \'component_function': {
        \  'ale': 'ALEGetStatusLine',
        \  'filename': 'LightLineFilename',
        \}
    \}
    function! LightLineFilename()
        return expand('%:p:h')
    endfunction
'''

[[plugins]]
repo = 'kien/ctrlp.vim'
hook_add = '''
    let g:ctrlp_dotfiles = 1
'''

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
    let g:go_play_open_browser = 0
    let g:go_fmt_fail_silently = 1
    let g:go_fmt_autosave = 1
    let g:go_fmt_command = "goimports"
    let g:go_disable_autoinstall = 1
    let g:go_snippet_engine = "neosnippet"
    let g:go_template_use_pkg = 1
'''

[[plugins]]
repo = 'zchee/deoplete-go''
hook_post_source = '''
    let g:dein#plugin.build = make
'''

[[plugins]]
repo = 'davidhalter/jedi'
 
[[plugins]]
repo = 'zchee/deoplete-jedi'

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nmap <silent> <C-q>      :NERDTreeToggle<CR>
    vmap <silent> <C-q> <Esc>:NERDTreeToggle<CR>
    omap <silent> <C-q>      :NERDTreeToggle<CR>
    imap <silent> <C-q> <Esc>:NERDTreeToggle<CR>
    cmap <silent> <C-q> <C-u>:NERDTreeToggle<CR>
    
    let NERDTreeShowHidden=1
'''

[[plugins]]
repo = 'derekwyatt/vim-scala'

[[plugins]]
repo = 'ensime/ensime-vim'

[[plugins]]
repo =  'stephpy/vim-yaml'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'moll/vim-node'
 
 [[plugins]]
repo = 'marijnh/tern_for_vim'
build = 'npm install'

[[plugins]]
repo = 'benjie/neomake-local-eslint.vim'

[[plugins]]
repo = 'hashivim/vim-terraform'
hook_add = '''
    let g:terraform_align = 1
'''

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'plasticboy/vim-markdown'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap [fugitive]  <Nop>
    nmap <space>g [fugitive]
    nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
    nnoremap <silent> [fugitive]a :Gwrite<CR>
    nnoremap <silent> [fugitive]c :Gcommit-v<CR>
    nnoremap <silent> [fugitive]b :Gblame<CR>
    nnoremap <silent> [fugitive]d :Gdiff<CR>
    nnoremap <silent> [fugitive]m :Gmerge<CR>
'''

[[plugins]]
repo = 'uarun/vim-protobuf'
