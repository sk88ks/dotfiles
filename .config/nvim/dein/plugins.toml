[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'sjl/badwolf'

[[plugins]]
repo = 'cespare/vim-toml'

#[[plugins]]
#repo = 'prabirshrestha/async.vim'
#hook_add = '''
#    inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
#    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
#    inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
#    imap <c-space> <Plug>(asyncomplete_force_refresh)
#    let g:asyncomplete_auto_popup = 1
#'''
#
#[[plugins]]
#repo = 'prabirshrestha/vim-lsp'
#hook_add = '''
#    augroup LspGo
#      au!
#      autocmd User lsp_setup call lsp#register_server({
#          \ 'name': 'go-lang',
#          \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
#          \ 'whitelist': ['go'],
#          \ })
#      autocmd BufWritePre *.go LspDocumentFormatSync
#      autocmd FileType go setlocal omnifunc=lsp#complete
#      autocmd FileType go nmap <leader> jd <plug>(lsp-definition)
#      "autocmd FileType go nmap <buffer> ,n <plug>(lsp-next-error)
#      "autocmd FileType go nmap <buffer> ,p <plug>(lsp-previous-error)
#    augroup END
#'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
rev = 'next'
depends = ['fzf.vim']
hook_add = '''
  set hidden
  set signcolumn=yes
  let g:LanguageClient_serverCommands = {
      \ 'go': ['gopls', '-mode', 'stdio']
      \ }
  let g:LanguageClient_loadSettings = 1
  let g:LanguageClient_hasSnippetSupport = 0

  nnoremap <leader>sd :call LanguageClient#textDocument_hover()<CR>
  nnoremap <leader>jd :call LanguageClient#textDocument_definition()<CR>
  nnoremap <leader>jv :call LanguageClient#textDocument_definition({'gotoCmd': "vsplit"})<CR>
  nnoremap <leader>jy :call LanguageClient#textDocument_typeDefinition({'gotoCmd': "vsplit"})<CR>
  nnoremap <leader>ji :call LanguageClient#textDocument_implementation({'gotoCmd': "vsplit"})<CR>
  noremap <leader>rn :call LanguageClient#textDocument_rename()<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_completion_start_length = 1
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#enable_auto_close_preview = 1
    let g:deoplete#force_omni_input_patterns = get(g:, 'deoplete#force_omni_input_patterns', {})
    let g:deoplete#force_omni_input_patterns.go = '[^. \t]\.\w*'
    imap <expr><TAB>
     \ pumvisible() ? "\<C-n>" : "\<TAB>"
'''

[[plugins]]
repo = 'SirVer/ultisnips'
depends = ['vim-snippets']
hook_add = '''
    let g:UltiSnipsExpandTrigger="<c-x>"
    let g:UltiSnipsJumpForwardTrigger="<c-x>"
    let g:UltiSnipsJumpBackwardTrigger="<c-x>"
    imap <C-k> <C-R>=UltiSnips#ExpandSnippetOrJump()<cr>
    smap <C-k> <Esc>:call UltiSnips#ExpandSnippetOrJump()<cr>
    xmap <C-k> :call UltiSnips#SaveLastVisualSelection()<cr>gvs
'''

[[plugins]]
repo = 'honza/vim-snippets'

#[[plugins]]
#repo = 'Shougo/neosnippet-snippets'
#
#[[plugins]]
#repo = 'Shougo/neosnippet.vim'
#depends = ['neosnippet-snippets']
#hook_source = '''
#    let g:neosnippet#enable_complete_done = 1
#    imap <C-j> <Plug>(neosnippet_expand_or_jump)
#    smap <C-j> <Plug>(neosnippet_expand_or_jump)
#    xmap <C-j> <Plug>(neosnippet_expand_target)
#    if has('conceal')
#        set conceallevel=2 concealcursor=niv
#    endif
#'''

#[[plugins]]
#repo = 'w0rp/ale'
#hook_add = '''
#    let g:ale_lint_on_save = 0
#    let g:ale_lint_on_enter = 0
#    let g:ale_lint_on_text_changed = 0
#    let g:ale_fix_on_save = 1
#    let g:ale_set_loclist = 0
#    let g:ale_set_quickfix = 1
#    let g:ale_sign_column_always = 1
#    let g:ale_open_list = 1
#    let g:ale_keep_list_window_open = 0
#
#    let g:ale_linters = {}
#
#    let g:ale_linters = {}
#    let g:ale_fixers = {}
#
#    let g:ale_fixers.go = ['goimports']
#    let g:ale_linters.go = ['gopls']
#
#    let g:ale_fixers.python = ['isort', 'autopep8', 'yapf']
#    let g:ale_linters.python = ['pyls']
#'''

#[[plugins]]
#repo = 'neoclide/coc.nvim'
#build = 'yarn install --frozen-lockfile'
#hook_add = 'source ~/.config/nvim/dein/coc.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    nnoremap [denite] <Nop>
    nmap <C-c> [denite]

    " Show files under current dir
    nnoremap <silent> [denite]f :<C-u>DeniteBufferDir
          \ -direction=topleft -cursor-wrap=true file file:new<CR>
    " List buffers
    nnoremap <silent> [denite]b :<C-u>Denite -direction=topleft -cursor-wrap=true buffer<CR>
    " List register
    nnoremap <silent> [denite]r :<C-u>Denite -direction=topleft -cursor-wrap=true -buffer-name=register register<CR>
    " List recent open files
    nnoremap <silent> [denite]m :<C-u>Denite -direction=topleft -cursor-wrap=true file_mru<CR>
    " List bookmark
    nnoremap <silent> [denite]c :<C-u>Denite -direction=topleft -cursor-wrap=true bookmark<CR>
    " Add bookmark
    nnoremap <silent> [denite]a :<C-u>DeniteBookmarkAdd<CR>

    " .git
    "nnoremap <silent> [denite]k :<C-u>Denite -direction=topleft -cursor-wrap=true
    "      \ -path=`substitute(finddir('.git', './;'), '.git', '', 'g')`
    "      \ file_rec/git<CR>

    call denite#custom#source('file'    , 'matchers', ['matcher_cpsm', 'matcher_fuzzy'])

    call denite#custom#source('buffer'  , 'matchers', ['matcher_regexp'])
    call denite#custom#source('file_mru', 'matchers', ['matcher_regexp'])

    call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])

    call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>', 'noremap')
    call denite#custom#map('insert', '<C-W>', '<denite:move_up_path>', 'noremap')
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['vim-fugitive']
hook_add = '''
    let g:lightline = {
        \'colorscheme': 'landscape',
        \'active': {
        \  'left': [
        \    ['mode', 'paste'],
        \    ['cocstatus', 'fugitive', 'readonly', 'filename', 'modified'],
        \  ]
        \},
        \'component': {
        \   'readonly': '%{&filetype=="help"?"":&readonly?"ro":""}',
        \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
        \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
        \},
        \'component_visible_condition': {
        \   'readonly': '(&filetype!="help"&& &readonly)',
        \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
        \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
        \},
        \'component_function': {
        \  'filename': 'MyFilename',
        \   'cocstatus': 'coc#status'
        \}
    \}
    set laststatus=2
    function! MyFilename()
        let p = substitute(expand('%:p'), $HOME, '~', '')
        let name = ""
	    let subs = split(p, "/")
	    let i = 1
	    for s in subs
	    	let parent = name
	    	if  i == len(subs)
	    		let name = parent . '/' . s
	    	elseif i == 1
	    		let name = s
	    	else
	    		let name = parent . '/' . s
	    	endif
	    	let i += 1
	    endfor
        return name
    endfunction
'''

#[[plugins]]
#repo = 'airblade/vim-gitgutter'
#hook_add = '''
#    nmap <silent> <C-g><C-n> <Plug>GitGutterNextHunk
#    nmap <silent> <C-g><C-p> <Plug>GitGutterPrevHunk
#'''


[[plugins]]
repo = 'kien/ctrlp.vim'
hook_add = '''
    let g:ctrlp_use_caching=0
    let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap [fugitive]  <Nop>
    nmap <space>g [fugitive]
    nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
    nnoremap <silent> [fugitive]a :Gwrite<CR>
    nnoremap <silent> [fugitive]c :Gcommit-v<CR>
    nnoremap <silent> [fugitive]b :Gblame<CR>
    nnoremap <silent> [fugitive]d :Gdiff<CR>
    nnoremap <silent> [fugitive]m :Gmerge<CR>
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
set rtp+=/usr/local/opt/fzf
let g:fzf_buffers_jump = 1
nnoremap <silent> <Leader>ff :<C-u>Ag<CR>
nnoremap <silent> <Leader>fh :<C-u>History<CR>
nnoremap <silent> <Leader>ft :<C-u>call fzf#vim#tags(expand('<cword>'))<CR>
nnoremap <silent> <Leader>fb :<C-u>Buffers<CR>
nnoremap <silent> <Leader>fs :<C-u>GFiles?<CR>
nnoremap <silent> <Leader>fgf :<C-u>GFiles<CR>
nnoremap <silent> <Leader>fm :<C-u>Marks<CR>
let g:fzf_layout = { 'down': '30%' }
let g:fzf_action = {
  \ 'ctrl-b': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

augroup vimrc_fzf
    autocmd!
    autocmd FileType fzf tnoremap <buffer> <leader>z <Esc>
augroup END
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
    vmap <Leader>l <Plug>(expand_region_expand)
    vmap <Leader>h <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
    map  <Leader>ej <Plug>(easymotion-bd-w)
    nmap <Leader>ej <Plug>(easymotion-overwin-w)
    map <Leader>el <Plug>(easymotion-bd-jk)
    nmap <Leader>el <Plug>(easymotion-overwin-line)
    map <Leader>ek <Plug>(easymotion-bd-f)
    nmap <Leader>ek <Plug>(easymotion-overwin-f)
    nmap <Leader>ekk <Plug>(easymotion-overwin-f2)
'''

#[[plugins]]
#repo = 'yuttie/comfortable-motion.vim'
#hook_add = '''
#    let g:comfortable_motion_interval = 2400.0 / 60
#    let g:comfortable_motion_friction = 100.0
#    let g:comfortable_motion_air_drag = 3.0
#'''

[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
  let g:go_fmt_command = "goimports"
  let g:go_def_mapping_enabled = 0
  let g:go_doc_keywordprg_enabled = 0
'''

#[[plugins]]
#repo = 'jmcantrell/vim-virtualenv'
#
#[[plugins]]
#repo = 'scrooloose/nerdtree'
#hook_add = '''
#    nmap <silent> <C-q>      :NERDTreeToggle<CR>
#    vmap <silent> <C-q> <Esc>:NERDTreeToggle<CR>
#    omap <silent> <C-q>      :NERDTreeToggle<CR>
#    imap <silent> <C-q> <Esc>:NERDTreeToggle<CR>
#    cmap <silent> <C-q> <C-u>:NERDTreeToggle<CR>
#
#    let NERDTreeShowHidden=1
#'''
#
[[plugins]]
repo = 'hashivim/vim-terraform'
hook_add = '''
    let g:terraform_align = 1
'''
#
[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'plasticboy/vim-markdown'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'kannokanno/previm'


[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

[[plugins]]
repo = 'uarun/vim-protobuf'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
    vnoremap <silent> <Enter> :EasyAlign<cr>
'''
#
#[[plugins]]
#repo = 'kylef/apiblueprint.vim'
#hook_add = '''
#    autocmd FileType apiblueprint nnoremap <C-b> :call GenerateRefract()<cr>
#'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'bazelbuild/vim-ft-bzl'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'buoto/gotests-vim'

[[plugins]]
repo = 'rhysd/vim-clang-format'
hook_add = '''
    let g:clang_format#filetype_style_options = {
        \"proto": {
        \    "BasedOnStyle" : "Google",
        \    "AlignConsecutiveAssignments": "true",
        \    "AlignConsecutiveDeclarations": "true",
        \    }
        \}
    autocmd FileType c,cpp,proto,javascript ClangFormatAutoEnable
'''
